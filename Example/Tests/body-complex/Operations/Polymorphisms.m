/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import "Polymorphisms.h"
#import "Error.h"
#import "../AutoRestComplexTestService.h"

/**
 * The protocol PolymorphismsProtocol implementation
 */
@implementation Polymorphisms

    - (instancetype) initWithService: (AutoRestComplexTestService *) service {
        if (self = [super init]) {
            _service = service;
        }

        return self;
    }

    /**
     * Get complex types that are polymorphic.
    *
     * @param callback A block where Fish is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getValidWithCallback : (void(^)(Fish*, OperationError*)) callback {


        NSString* __url = [RequestHelper buildUrl: self.service.DEFAULT_BASE_URL
                                         withPath: @"/complex/polymorphism/valid"
                                   withPathParams: @{}
                                  withQueryParams: @{}];

        RequestParameters* __rp = [RequestParameters createWithUrl: __url
                                                        withMethod: @"GET"
                                                       withHeaders: @{@"Content-Type" : @"application/json; charset=utf-8"}
                                                          withBody: nil];

        [RequestHelper executeRequest:__rp
                    withResponseClass:[Fish class]
                       withErrorClass:[Error class]
                         withCallback:^(id _Nullable result, OperationError* _Nullable error) {
            callback(result, error);
        }];

    }


    /**
     * Put complex types that are polymorphic.
    *
     * @param complexBody Please put a salmon that looks like this:
 {
         'fishtype':'Salmon',
         'location':'alaska',
         'iswild':true,
         'species':'king',
         'length':1.0,
         'siblings':[
           {
             'fishtype':'Shark',
             'age':6,
             'birthday': '2012-01-05T01:00:00Z',
             'length':20.0,
             'species':'predator',
           },
           {
             'fishtype':'Sawshark',
             'age':105,
             'birthday': '1900-01-05T01:00:00Z',
             'length':10.0,
             'picture': new Buffer([255, 255, 255, 255, 254]).toString('base64'),
             'species':'dangerous',
           },
           {
             'fishtype': 'goblin',
             'age': 1,
             'birthday': '2015-08-08T00:00:00Z',
             'length': 30.0,
             'species': 'scary',
             'jawsize': 5
           }
         ]
       };
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a requred parameter is not provided.
     */
    - (void) putValidWithComplexBody : (Fish *) complexBody withCallback : (void(^)(OperationError*)) callback {

        if (complexBody == nil) {
            NSException *e = [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter complexBody is required and cannot be nil."
                userInfo: nil];
            @throw e;
        }


        NSString* __url = [RequestHelper buildUrl: self.service.DEFAULT_BASE_URL
                                         withPath: @"/complex/polymorphism/valid"
                                   withPathParams: @{}
                                  withQueryParams: @{}];

        RequestParameters* __rp = [RequestParameters createWithUrl: __url
                                                        withMethod: @"PUT"
                                                       withHeaders: @{@"Content-Type" : @"application/json; charset=utf-8"}
                                                          withBody: [JsonCoder encodeObject:complexBody]];

         [RequestHelper executeRequest:__rp
                        withErrorClass:[Error class]
                          withCallback:^(OperationError* _Nullable error) {
            callback(error);
        }];

    }


    /**
     * Get complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties.
    *
     * @param callback A block where Salmon is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getComplicatedWithCallback : (void(^)(Salmon*, OperationError*)) callback {


        NSString* __url = [RequestHelper buildUrl: self.service.DEFAULT_BASE_URL
                                         withPath: @"/complex/polymorphism/complicated"
                                   withPathParams: @{}
                                  withQueryParams: @{}];

        RequestParameters* __rp = [RequestParameters createWithUrl: __url
                                                        withMethod: @"GET"
                                                       withHeaders: @{@"Content-Type" : @"application/json; charset=utf-8"}
                                                          withBody: nil];

        [RequestHelper executeRequest:__rp
                    withResponseClass:[Salmon class]
                       withErrorClass:[Error class]
                         withCallback:^(id _Nullable result, OperationError* _Nullable error) {
            callback(result, error);
        }];

    }


    /**
     * Put complex types that are polymorphic, but not at the root of the hierarchy; also have additional properties.
    *
     * @param complexBody the Salmon value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a requred parameter is not provided.
     */
    - (void) putComplicatedWithComplexBody : (Salmon *) complexBody withCallback : (void(^)(OperationError*)) callback {

        if (complexBody == nil) {
            NSException *e = [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter complexBody is required and cannot be nil."
                userInfo: nil];
            @throw e;
        }


        NSString* __url = [RequestHelper buildUrl: self.service.DEFAULT_BASE_URL
                                         withPath: @"/complex/polymorphism/complicated"
                                   withPathParams: @{}
                                  withQueryParams: @{}];

        RequestParameters* __rp = [RequestParameters createWithUrl: __url
                                                        withMethod: @"PUT"
                                                       withHeaders: @{@"Content-Type" : @"application/json; charset=utf-8"}
                                                          withBody: [JsonCoder encodeObject:complexBody]];

         [RequestHelper executeRequest:__rp
                        withErrorClass:[Error class]
                          withCallback:^(OperationError* _Nullable error) {
            callback(error);
        }];

    }


    /**
     * Put complex types that are polymorphic, omitting the discriminator.
    *
     * @param complexBody the Salmon value
     * @param callback A block where Salmon is a result object and OperationError is nil, if the operation is successful
     * @throws IllegalArgumentException if a requred parameter is not provided.
     */
    - (void) putMissingDiscriminatorWithComplexBody : (Salmon *) complexBody withCallback : (void(^)(Salmon*, OperationError*)) callback {

        if (complexBody == nil) {
            NSException *e = [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter complexBody is required and cannot be nil."
                userInfo: nil];
            @throw e;
        }


        NSString* __url = [RequestHelper buildUrl: self.service.DEFAULT_BASE_URL
                                         withPath: @"/complex/polymorphism/missingdiscriminator"
                                   withPathParams: @{}
                                  withQueryParams: @{}];

        RequestParameters* __rp = [RequestParameters createWithUrl: __url
                                                        withMethod: @"PUT"
                                                       withHeaders: @{@"Content-Type" : @"application/json; charset=utf-8"}
                                                          withBody: [JsonCoder encodeObject:complexBody]];

        [RequestHelper executeRequest:__rp
                    withResponseClass:[Salmon class]
                       withErrorClass:[Error class]
                         withCallback:^(id _Nullable result, OperationError* _Nullable error) {
            callback(result, error);
        }];

    }


    /**
     * Put complex types that are polymorphic, attempting to omit required 'birthday' field - the request should not be allowed from the client.
    *
     * @param complexBody Please attempt put a sawshark that looks like this, the client should not allow this data to be sent:
 {
     "fishtype": "sawshark",
     "species": "snaggle toothed",
     "length": 18.5,
     "age": 2,
     "birthday": "2013-06-01T01:00:00Z",
     "location": "alaska",
     "picture": base64(FF FF FF FF FE),
     "siblings": [
         {
             "fishtype": "shark",
             "species": "predator",
             "birthday": "2012-01-05T01:00:00Z",
             "length": 20,
             "age": 6
         },
         {
             "fishtype": "sawshark",
             "species": "dangerous",
             "picture": base64(FF FF FF FF FE),
             "length": 10,
             "age": 105
         }
     ]
 }
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a requred parameter is not provided.
     */
    - (void) putValidMissingRequiredWithComplexBody : (Fish *) complexBody withCallback : (void(^)(OperationError*)) callback {

        if (complexBody == nil) {
            NSException *e = [NSException
                exceptionWithName: @"IllegalArgumentException"
                reason: @"Parameter complexBody is required and cannot be nil."
                userInfo: nil];
            @throw e;
        }


        NSString* __url = [RequestHelper buildUrl: self.service.DEFAULT_BASE_URL
                                         withPath: @"/complex/polymorphism/missingrequired/invalid"
                                   withPathParams: @{}
                                  withQueryParams: @{}];

        RequestParameters* __rp = [RequestParameters createWithUrl: __url
                                                        withMethod: @"PUT"
                                                       withHeaders: @{@"Content-Type" : @"application/json; charset=utf-8"}
                                                          withBody: [JsonCoder encodeObject:complexBody]];

         [RequestHelper executeRequest:__rp
                        withErrorClass:[Error class]
                          withCallback:^(OperationError* _Nullable error) {
            callback(error);
        }];

    }


@end
