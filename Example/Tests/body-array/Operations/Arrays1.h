/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <AzureClientRuntime/AzureClientRuntime.h>
#import "../Models/FooEnum.h"
#import "../Models/Product.h"
@class OperationError;

/**
 * An protocol provides access to all Arrays operations
 */
@protocol ArraysProtocol

    /**
     * Get null array value.
     *
     * @param callback A block where NSArray<AZInteger *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getNullWithCallback : (void(^)(NSArray<AZInteger *>*, OperationError*)) callback;

    /**
     * Get invalid array [1, 2, 3.
     *
     * @param callback A block where NSArray<AZInteger *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getInvalidWithCallback : (void(^)(NSArray<AZInteger *>*, OperationError*)) callback;

    /**
     * Get empty array value [].
     *
     * @param callback A block where NSArray<AZInteger *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getEmptyWithCallback : (void(^)(NSArray<AZInteger *>*, OperationError*)) callback;

    /**
     * Set array value empty [].
     *
     * @param arrayBody the NSArray&lt;NSString *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putEmptyWithArrayBody : (NSArray<NSString *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get boolean array value [true, false, false, true].
     *
     * @param callback A block where NSArray<AZBoolean *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getBooleanTfftWithCallback : (void(^)(NSArray<AZBoolean *>*, OperationError*)) callback;

    /**
     * Set array value empty [true, false, false, true].
     *
     * @param arrayBody the NSArray&lt;AZBoolean *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putBooleanTfftWithArrayBody : (NSArray<AZBoolean *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get boolean array value [true, null, false].
     *
     * @param callback A block where NSArray<AZBoolean *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getBooleanInvalidNullWithCallback : (void(^)(NSArray<AZBoolean *>*, OperationError*)) callback;

    /**
     * Get boolean array value [true, 'boolean', false].
     *
     * @param callback A block where NSArray<AZBoolean *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getBooleanInvalidStringWithCallback : (void(^)(NSArray<AZBoolean *>*, OperationError*)) callback;

    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @param callback A block where NSArray<AZInteger *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getIntegerValidWithCallback : (void(^)(NSArray<AZInteger *>*, OperationError*)) callback;

    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the NSArray&lt;AZInteger *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putIntegerValidWithArrayBody : (NSArray<AZInteger *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get integer array value [1, null, 0].
     *
     * @param callback A block where NSArray<AZInteger *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getIntInvalidNullWithCallback : (void(^)(NSArray<AZInteger *>*, OperationError*)) callback;

    /**
     * Get integer array value [1, 'integer', 0].
     *
     * @param callback A block where NSArray<AZInteger *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getIntInvalidStringWithCallback : (void(^)(NSArray<AZInteger *>*, OperationError*)) callback;

    /**
     * Get integer array value [1, -1, 3, 300].
     *
     * @param callback A block where NSArray<AZLong *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getLongValidWithCallback : (void(^)(NSArray<AZLong *>*, OperationError*)) callback;

    /**
     * Set array value empty [1, -1, 3, 300].
     *
     * @param arrayBody the NSArray&lt;AZLong *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putLongValidWithArrayBody : (NSArray<AZLong *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get long array value [1, null, 0].
     *
     * @param callback A block where NSArray<AZLong *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getLongInvalidNullWithCallback : (void(^)(NSArray<AZLong *>*, OperationError*)) callback;

    /**
     * Get long array value [1, 'integer', 0].
     *
     * @param callback A block where NSArray<AZLong *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getLongInvalidStringWithCallback : (void(^)(NSArray<AZLong *>*, OperationError*)) callback;

    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @param callback A block where NSArray<AZDouble *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getFloatValidWithCallback : (void(^)(NSArray<AZDouble *>*, OperationError*)) callback;

    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the NSArray&lt;AZDouble *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putFloatValidWithArrayBody : (NSArray<AZDouble *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @param callback A block where NSArray<AZDouble *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getFloatInvalidNullWithCallback : (void(^)(NSArray<AZDouble *>*, OperationError*)) callback;

    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @param callback A block where NSArray<AZDouble *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getFloatInvalidStringWithCallback : (void(^)(NSArray<AZDouble *>*, OperationError*)) callback;

    /**
     * Get float array value [0, -0.01, 1.2e20].
     *
     * @param callback A block where NSArray<AZDouble *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDoubleValidWithCallback : (void(^)(NSArray<AZDouble *>*, OperationError*)) callback;

    /**
     * Set array value [0, -0.01, 1.2e20].
     *
     * @param arrayBody the NSArray&lt;AZDouble *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putDoubleValidWithArrayBody : (NSArray<AZDouble *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get float array value [0.0, null, -1.2e20].
     *
     * @param callback A block where NSArray<AZDouble *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDoubleInvalidNullWithCallback : (void(^)(NSArray<AZDouble *>*, OperationError*)) callback;

    /**
     * Get boolean array value [1.0, 'number', 0.0].
     *
     * @param callback A block where NSArray<AZDouble *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDoubleInvalidStringWithCallback : (void(^)(NSArray<AZDouble *>*, OperationError*)) callback;

    /**
     * Get string array value ['foo1', 'foo2', 'foo3'].
     *
     * @param callback A block where NSArray<NSString *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getStringValidWithCallback : (void(^)(NSArray<NSString *>*, OperationError*)) callback;

    /**
     * Set array value ['foo1', 'foo2', 'foo3'].
     *
     * @param arrayBody the NSArray&lt;NSString *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putStringValidWithArrayBody : (NSArray<NSString *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get enum array value ['foo1', 'foo2', 'foo3'].
     *
     * @param callback A block where NSArray<FooEnum *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getEnumValidWithCallback : (void(^)(NSArray<FooEnum *>*, OperationError*)) callback;

    /**
     * Set array value ['foo1', 'foo2', 'foo3'].
     *
     * @param arrayBody the NSArray&lt;FooEnum *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putEnumValidWithArrayBody : (NSArray<FooEnum *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get enum array value ['foo1', 'foo2', 'foo3'].
     *
     * @param callback A block where NSArray<NSString *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getStringEnumValidWithCallback : (void(^)(NSArray<NSString *>*, OperationError*)) callback;

    /**
     * Set array value ['foo1', 'foo2', 'foo3'].
     *
     * @param arrayBody the NSArray&lt;NSString *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putStringEnumValidWithArrayBody : (NSArray<NSString *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get string array value ['foo', null, 'foo2'].
     *
     * @param callback A block where NSArray<NSString *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getStringWithNullWithCallback : (void(^)(NSArray<NSString *>*, OperationError*)) callback;

    /**
     * Get string array value ['foo', 123, 'foo2'].
     *
     * @param callback A block where NSArray<NSString *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getStringWithInvalidWithCallback : (void(^)(NSArray<NSString *>*, OperationError*)) callback;

    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @param callback A block where NSArray<NSUUID *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getUuidValidWithCallback : (void(^)(NSArray<NSUUID *>*, OperationError*)) callback;

    /**
     * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
     *
     * @param arrayBody the NSArray&lt;NSUUID *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putUuidValidWithArrayBody : (NSArray<NSUUID *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].
     *
     * @param callback A block where NSArray<NSUUID *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getUuidInvalidCharsWithCallback : (void(^)(NSArray<NSUUID *>*, OperationError*)) callback;

    /**
     * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @param callback A block where NSArray<Date *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateValidWithCallback : (void(^)(NSArray<Date *>*, OperationError*)) callback;

    /**
     * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].
     *
     * @param arrayBody the NSArray&lt;Date *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putDateValidWithArrayBody : (NSArray<Date *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get date array value ['2012-01-01', null, '1776-07-04'].
     *
     * @param callback A block where NSArray<Date *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateInvalidNullWithCallback : (void(^)(NSArray<Date *>*, OperationError*)) callback;

    /**
     * Get date array value ['2011-03-22', 'date'].
     *
     * @param callback A block where NSArray<Date *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateInvalidCharsWithCallback : (void(^)(NSArray<Date *>*, OperationError*)) callback;

    /**
     * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @param callback A block where NSArray<DateTime *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateTimeValidWithCallback : (void(^)(NSArray<DateTime *>*, OperationError*)) callback;

    /**
     * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
     *
     * @param arrayBody the NSArray&lt;DateTime *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putDateTimeValidWithArrayBody : (NSArray<DateTime *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get date array value ['2000-12-01t00:00:01z', null].
     *
     * @param callback A block where NSArray<DateTime *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateTimeInvalidNullWithCallback : (void(^)(NSArray<DateTime *>*, OperationError*)) callback;

    /**
     * Get date array value ['2000-12-01t00:00:01z', 'date-time'].
     *
     * @param callback A block where NSArray<DateTime *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateTimeInvalidCharsWithCallback : (void(^)(NSArray<DateTime *>*, OperationError*)) callback;

    /**
     * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @param callback A block where NSArray<DateTimeRfc1123 *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDateTimeRfc1123ValidWithCallback : (void(^)(NSArray<DateTimeRfc1123 *>*, OperationError*)) callback;

    /**
     * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
     *
     * @param arrayBody the NSArray&lt;DateTimeRfc1123 *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putDateTimeRfc1123ValidWithArrayBody : (NSArray<DateTimeRfc1123 *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @param callback A block where NSArray<AZTimeSpan *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDurationValidWithCallback : (void(^)(NSArray<AZTimeSpan *>*, OperationError*)) callback;

    /**
     * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
     *
     * @param arrayBody the NSArray&lt;AZTimeSpan *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putDurationValidWithArrayBody : (NSArray<AZTimeSpan *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64.
     *
     * @param callback A block where NSArray<AZByteArray *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getByteValidWithCallback : (void(^)(NSArray<AZByteArray *>*, OperationError*)) callback;

    /**
     * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64.
     *
     * @param arrayBody the NSArray&lt;AZByteArray *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putByteValidWithArrayBody : (NSArray<AZByteArray *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.
     *
     * @param callback A block where NSArray<AZByteArray *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getByteInvalidNullWithCallback : (void(^)(NSArray<AZByteArray *>*, OperationError*)) callback;

    /**
     * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded.
     *
     * @param callback A block where NSArray<AZBase64Url *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getBase64UrlWithCallback : (void(^)(NSArray<AZBase64Url *>*, OperationError*)) callback;

    /**
     * Get array of complex type null value.
     *
     * @param callback A block where NSArray<Product *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getComplexNullWithCallback : (void(^)(NSArray<Product *>*, OperationError*)) callback;

    /**
     * Get empty array of complex type [].
     *
     * @param callback A block where NSArray<Product *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getComplexEmptyWithCallback : (void(^)(NSArray<Product *>*, OperationError*)) callback;

    /**
     * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}].
     *
     * @param callback A block where NSArray<Product *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getComplexItemNullWithCallback : (void(^)(NSArray<Product *>*, OperationError*)) callback;

    /**
     * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}].
     *
     * @param callback A block where NSArray<Product *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getComplexItemEmptyWithCallback : (void(^)(NSArray<Product *>*, OperationError*)) callback;

    /**
     * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @param callback A block where NSArray<Product *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getComplexValidWithCallback : (void(^)(NSArray<Product *>*, OperationError*)) callback;

    /**
     * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
     *
     * @param arrayBody the NSArray&lt;Product *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putComplexValidWithArrayBody : (NSArray<Product *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get a null array.
     *
     * @param callback A block where NSArray<NSArray<NSString *> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getArrayNullWithCallback : (void(^)(NSArray<NSArray<NSString *> *>*, OperationError*)) callback;

    /**
     * Get an empty array [].
     *
     * @param callback A block where NSArray<NSArray<NSString *> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getArrayEmptyWithCallback : (void(^)(NSArray<NSArray<NSString *> *>*, OperationError*)) callback;

    /**
     * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].
     *
     * @param callback A block where NSArray<NSArray<NSString *> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getArrayItemNullWithCallback : (void(^)(NSArray<NSArray<NSString *> *>*, OperationError*)) callback;

    /**
     * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].
     *
     * @param callback A block where NSArray<NSArray<NSString *> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getArrayItemEmptyWithCallback : (void(^)(NSArray<NSArray<NSString *> *>*, OperationError*)) callback;

    /**
     * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @param callback A block where NSArray<NSArray<NSString *> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getArrayValidWithCallback : (void(^)(NSArray<NSArray<NSString *> *>*, OperationError*)) callback;

    /**
     * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
     *
     * @param arrayBody the NSArray&lt;NSArray&lt;NSString *&gt; *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putArrayValidWithArrayBody : (NSArray<NSArray<NSString *> *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

    /**
     * Get an array of Dictionaries with value null.
     *
     * @param callback A block where NSArray<NSDictionary<NSString*, NSString*> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDictionaryNullWithCallback : (void(^)(NSArray<NSDictionary<NSString*, NSString*> *>*, OperationError*)) callback;

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [].
     *
     * @param callback A block where NSArray<NSDictionary<NSString*, NSString*> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDictionaryEmptyWithCallback : (void(^)(NSArray<NSDictionary<NSString*, NSString*> *>*, OperationError*)) callback;

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param callback A block where NSArray<NSDictionary<NSString*, NSString*> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDictionaryItemNullWithCallback : (void(^)(NSArray<NSDictionary<NSString*, NSString*> *>*, OperationError*)) callback;

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param callback A block where NSArray<NSDictionary<NSString*, NSString*> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDictionaryItemEmptyWithCallback : (void(^)(NSArray<NSDictionary<NSString*, NSString*> *>*, OperationError*)) callback;

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param callback A block where NSArray<NSDictionary<NSString*, NSString*> *> is a result object and OperationError is nil, if the operation is successful
     */
    - (void) getDictionaryValidWithCallback : (void(^)(NSArray<NSDictionary<NSString*, NSString*> *>*, OperationError*)) callback;

    /**
     * Get an array of Dictionaries of type &lt;string, string&gt; with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
     *
     * @param arrayBody the NSArray&lt;NSDictionary&lt;NSString*, NSString*&gt; *&gt; value
     * @param callback A block where OperationError is nil if the operation is successful
     * @throws IllegalArgumentException if a required parameter is not provided.
     */
    - (void) putDictionaryValidWithArrayBody : (NSArray<NSDictionary<NSString*, NSString*> *> *) arrayBody withCallback : (void(^)(OperationError*)) callback;

@end

/**
* The protocol implementation
*/
@class AutoRestSwaggerBATArrayService;

@interface Arrays1 : NSObject <ArraysProtocol>
@property (readonly) AutoRestSwaggerBATArrayService* service;
- (instancetype) initWithService: (AutoRestSwaggerBATArrayService *) service;
@end
