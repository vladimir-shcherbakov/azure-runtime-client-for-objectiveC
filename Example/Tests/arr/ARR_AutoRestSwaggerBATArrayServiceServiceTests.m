/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

#import <XCTest/XCTest.h>
#import <AzureClientRuntime/AzureClientRuntime.h>
#import "ARR_AutoRestSwaggerBATArrayServiceService.h"
@interface ARR_AutoRestSwaggerBATArrayServiceServiceTests : XCTestCase
    @property id<ARR_AutoRestSwaggerBATArrayServiceServiceProtocol> service;
@end
@implementation ARR_AutoRestSwaggerBATArrayServiceServiceTests
- (void)setUp {
    // Put setup code here. This method is called before the invocation of each test method in the class.
    self.continueAfterFailure = NO;
    self.service = [ARR_AutoRestSwaggerBATArrayServiceService create];
}
- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
}

//>>>> ARR_Arrays arrays


/**
 * Get null array value.
 *
 */
- (void) test_arrays_getNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getNullWithCallback:^(NSArray<AZInteger*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get invalid array [1, 2, 3.
 *
 */
- (void) test_arrays_getInvalid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getInvalidWithCallback:^(NSArray<AZInteger*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get empty array value [].
 *
 */
- (void) test_arrays_getEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getEmptyWithCallback:^(NSArray<AZInteger*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value empty [].
 *
 * body parameter: arrayBody the NSArray<NSString*> value
 */
- (void) test_arrays_putEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<NSString*>* arrayBody = nil;
    [op putEmptyWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get boolean array value [true, false, false, true].
 *
 */
- (void) test_arrays_getBooleanTfft {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getBooleanTfftWithCallback:^(NSArray<AZBoolean*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value empty [true, false, false, true].
 *
 * body parameter: arrayBody the NSArray<AZBoolean*> value
 */
- (void) test_arrays_putBooleanTfft {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZBoolean*>* arrayBody = nil;
    [op putBooleanTfftWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get boolean array value [true, null, false].
 *
 */
- (void) test_arrays_getBooleanInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getBooleanInvalidNullWithCallback:^(NSArray<AZBoolean*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get boolean array value [true, 'boolean', false].
 *
 */
- (void) test_arrays_getBooleanInvalidString {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getBooleanInvalidStringWithCallback:^(NSArray<AZBoolean*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get integer array value [1, -1, 3, 300].
 *
 */
- (void) test_arrays_getIntegerValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getIntegerValidWithCallback:^(NSArray<AZInteger*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value empty [1, -1, 3, 300].
 *
 * body parameter: arrayBody the NSArray<AZInteger*> value
 */
- (void) test_arrays_putIntegerValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZInteger*>* arrayBody = nil;
    [op putIntegerValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get integer array value [1, null, 0].
 *
 */
- (void) test_arrays_getIntInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getIntInvalidNullWithCallback:^(NSArray<AZInteger*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get integer array value [1, 'integer', 0].
 *
 */
- (void) test_arrays_getIntInvalidString {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getIntInvalidStringWithCallback:^(NSArray<AZInteger*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get integer array value [1, -1, 3, 300].
 *
 */
- (void) test_arrays_getLongValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getLongValidWithCallback:^(NSArray<AZLong*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value empty [1, -1, 3, 300].
 *
 * body parameter: arrayBody the NSArray<AZLong*> value
 */
- (void) test_arrays_putLongValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZLong*>* arrayBody = nil;
    [op putLongValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get long array value [1, null, 0].
 *
 */
- (void) test_arrays_getLongInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getLongInvalidNullWithCallback:^(NSArray<AZLong*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get long array value [1, 'integer', 0].
 *
 */
- (void) test_arrays_getLongInvalidString {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getLongInvalidStringWithCallback:^(NSArray<AZLong*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get float array value [0, -0.01, 1.2e20].
 *
 */
- (void) test_arrays_getFloatValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getFloatValidWithCallback:^(NSArray<AZDouble*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value [0, -0.01, 1.2e20].
 *
 * body parameter: arrayBody the NSArray<AZDouble*> value
 */
- (void) test_arrays_putFloatValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZDouble*>* arrayBody = nil;
    [op putFloatValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get float array value [0.0, null, -1.2e20].
 *
 */
- (void) test_arrays_getFloatInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getFloatInvalidNullWithCallback:^(NSArray<AZDouble*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get boolean array value [1.0, 'number', 0.0].
 *
 */
- (void) test_arrays_getFloatInvalidString {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getFloatInvalidStringWithCallback:^(NSArray<AZDouble*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get float array value [0, -0.01, 1.2e20].
 *
 */
- (void) test_arrays_getDoubleValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDoubleValidWithCallback:^(NSArray<AZDouble*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value [0, -0.01, 1.2e20].
 *
 * body parameter: arrayBody the NSArray<AZDouble*> value
 */
- (void) test_arrays_putDoubleValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZDouble*>* arrayBody = nil;
    [op putDoubleValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get float array value [0.0, null, -1.2e20].
 *
 */
- (void) test_arrays_getDoubleInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDoubleInvalidNullWithCallback:^(NSArray<AZDouble*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get boolean array value [1.0, 'number', 0.0].
 *
 */
- (void) test_arrays_getDoubleInvalidString {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDoubleInvalidStringWithCallback:^(NSArray<AZDouble*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get string array value ['foo1', 'foo2', 'foo3'].
 *
 */
- (void) test_arrays_getStringValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getStringValidWithCallback:^(NSArray<NSString*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value ['foo1', 'foo2', 'foo3'].
 *
 * body parameter: arrayBody the NSArray<NSString*> value
 */
- (void) test_arrays_putStringValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<NSString*>* arrayBody = nil;
    [op putStringValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get enum array value ['foo1', 'foo2', 'foo3'].
 *
 */
- (void) test_arrays_getEnumValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getEnumValidWithCallback:^(NSArray<ARR_FooEnum*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value ['foo1', 'foo2', 'foo3'].
 *
 * body parameter: arrayBody the NSArray<ARR_FooEnum*> value
 */
- (void) test_arrays_putEnumValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<ARR_FooEnum*>* arrayBody = nil;
    [op putEnumValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get enum array value ['foo1', 'foo2', 'foo3'].
 *
 */
- (void) test_arrays_getStringEnumValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getStringEnumValidWithCallback:^(NSArray<NSString*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value ['foo1', 'foo2', 'foo3'].
 *
 * body parameter: arrayBody the NSArray<NSString*> value
 */
- (void) test_arrays_putStringEnumValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<NSString*>* arrayBody = nil;
    [op putStringEnumValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get string array value ['foo', null, 'foo2'].
 *
 */
- (void) test_arrays_getStringWithNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getStringWithNullWithCallback:^(NSArray<NSString*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get string array value ['foo', 123, 'foo2'].
 *
 */
- (void) test_arrays_getStringWithInvalid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getStringWithInvalidWithCallback:^(NSArray<NSString*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
 *
 */
- (void) test_arrays_getUuidValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getUuidValidWithCallback:^(NSArray<NSUUID*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].
 *
 * body parameter: arrayBody the NSArray<NSUUID*> value
 */
- (void) test_arrays_putUuidValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<NSUUID*>* arrayBody = nil;
    [op putUuidValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].
 *
 */
- (void) test_arrays_getUuidInvalidChars {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getUuidInvalidCharsWithCallback:^(NSArray<NSUUID*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].
 *
 */
- (void) test_arrays_getDateValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateValidWithCallback:^(NSArray<AZDate*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].
 *
 * body parameter: arrayBody the NSArray<AZDate*> value
 */
- (void) test_arrays_putDateValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZDate*>* arrayBody = nil;
    [op putDateValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get date array value ['2012-01-01', null, '1776-07-04'].
 *
 */
- (void) test_arrays_getDateInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateInvalidNullWithCallback:^(NSArray<AZDate*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get date array value ['2011-03-22', 'date'].
 *
 */
- (void) test_arrays_getDateInvalidChars {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateInvalidCharsWithCallback:^(NSArray<AZDate*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
 *
 */
- (void) test_arrays_getDateTimeValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateTimeValidWithCallback:^(NSArray<AZDateTime*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].
 *
 * body parameter: arrayBody the NSArray<AZDateTime*> value
 */
- (void) test_arrays_putDateTimeValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZDateTime*>* arrayBody = nil;
    [op putDateTimeValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get date array value ['2000-12-01t00:00:01z', null].
 *
 */
- (void) test_arrays_getDateTimeInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateTimeInvalidNullWithCallback:^(NSArray<AZDateTime*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get date array value ['2000-12-01t00:00:01z', 'date-time'].
 *
 */
- (void) test_arrays_getDateTimeInvalidChars {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateTimeInvalidCharsWithCallback:^(NSArray<AZDateTime*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
 *
 */
- (void) test_arrays_getDateTimeRfc1123Valid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDateTimeRfc1123ValidWithCallback:^(NSArray<AZDateTimeRfc1123*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].
 *
 * body parameter: arrayBody the NSArray<AZDateTimeRfc1123*> value
 */
- (void) test_arrays_putDateTimeRfc1123Valid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZDateTimeRfc1123*>* arrayBody = nil;
    [op putDateTimeRfc1123ValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
 *
 */
- (void) test_arrays_getDurationValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDurationValidWithCallback:^(NSArray<AZTimeSpan*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].
 *
 * body parameter: arrayBody the NSArray<AZTimeSpan*> value
 */
- (void) test_arrays_putDurationValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZTimeSpan*>* arrayBody = nil;
    [op putDurationValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded in base64.
 *
 */
- (void) test_arrays_getByteValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getByteValidWithCallback:^(NSArray<AZByteArray*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each elementencoded in base 64.
 *
 * body parameter: arrayBody the NSArray<AZByteArray*> value
 */
- (void) test_arrays_putByteValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<AZByteArray*>* arrayBody = nil;
    [op putByteValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.
 *
 */
- (void) test_arrays_getByteInvalidNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getByteInvalidNullWithCallback:^(NSArray<AZByteArray*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with the items base64url encoded.
 *
 */
- (void) test_arrays_getBase64Url {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getBase64UrlWithCallback:^(NSArray<AZBase64Url*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get array of complex type null value.
 *
 */
- (void) test_arrays_getComplexNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getComplexNullWithCallback:^(NSArray<ARR_Product*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get empty array of complex type [].
 *
 */
- (void) test_arrays_getComplexEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getComplexEmptyWithCallback:^(NSArray<ARR_Product*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5, 'string': '6'}].
 *
 */
- (void) test_arrays_getComplexItemNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getComplexItemNullWithCallback:^(NSArray<ARR_Product*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5, 'string': '6'}].
 *
 */
- (void) test_arrays_getComplexItemEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getComplexItemEmptyWithCallback:^(NSArray<ARR_Product*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
 *
 */
- (void) test_arrays_getComplexValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getComplexValidWithCallback:^(NSArray<ARR_Product*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].
 *
 * body parameter: arrayBody the NSArray<ARR_Product*> value
 */
- (void) test_arrays_putComplexValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<ARR_Product*>* arrayBody = nil;
    [op putComplexValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get a null array.
 *
 */
- (void) test_arrays_getArrayNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getArrayNullWithCallback:^(NSArray<NSArray<NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an empty array [].
 *
 */
- (void) test_arrays_getArrayEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getArrayEmptyWithCallback:^(NSArray<NSArray<NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].
 *
 */
- (void) test_arrays_getArrayItemNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getArrayItemNullWithCallback:^(NSArray<NSArray<NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].
 *
 */
- (void) test_arrays_getArrayItemEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getArrayItemEmptyWithCallback:^(NSArray<NSArray<NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
 *
 */
- (void) test_arrays_getArrayValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getArrayValidWithCallback:^(NSArray<NSArray<NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].
 *
 * body parameter: arrayBody the NSArray<NSArray<NSString*>*> value
 */
- (void) test_arrays_putArrayValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<NSArray<NSString*>*>* arrayBody = nil;
    [op putArrayValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of Dictionaries with value null.
 *
 */
- (void) test_arrays_getDictionaryNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDictionaryNullWithCallback:^(NSArray<NSDictionary<NSString*, NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of Dictionaries of type <string, string> with value [].
 *
 */
- (void) test_arrays_getDictionaryEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDictionaryEmptyWithCallback:^(NSArray<NSDictionary<NSString*, NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].
 *
 */
- (void) test_arrays_getDictionaryItemNull {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDictionaryItemNullWithCallback:^(NSArray<NSDictionary<NSString*, NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
 *
 */
- (void) test_arrays_getDictionaryItemEmpty {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDictionaryItemEmptyWithCallback:^(NSArray<NSDictionary<NSString*, NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
 *
 */
- (void) test_arrays_getDictionaryValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    [op getDictionaryValidWithCallback:^(NSArray<NSDictionary<NSString*, NSString*>*>* result, AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}

/**
 * Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].
 *
 * body parameter: arrayBody the NSArray<NSDictionary<NSString*, NSString*>*> value
 */
- (void) test_arrays_putDictionaryValid {
    XCTestExpectation *waitingLoading = [self expectationWithDescription:@"Wait for HTTP request to complete"];
    id<ARR_ArraysProtocol> op = [self.service arrays];
    NSArray<NSDictionary<NSString*, NSString*>*>* arrayBody = nil;
    [op putDictionaryValidWithArrayBody:arrayBody withCallback:^(AZOperationError* error) {
        [waitingLoading fulfill];
        XCTAssertNil(error, @"%@", error.reason);
    }];
    [self waitForExpectationsWithTimeout:100 handler:^(NSError *error) {
        if (error) {XCTFail(@"After block was not called.");}
    }];
}



//- (void)testPerformanceExample {
//    // This is an example of a performance test case.
//    [self measureBlock:^{
//        // Put the code you want to measure the time of here.
//    }];
//}
@end
